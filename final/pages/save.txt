<template>
  <NuxtLayout>
    <v-progress-linear v-if="isLoading" color="secondary" indeterminate />
    <v-card class="ma-10">
      <v-table>
        <thead>
          <tr>
            <th class="text-center">Word</th>
            <th class="text-center">Pronunciation</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="(word, index) in words" :key="index">
            <td class="text-center">{{ word.word }}</td>
            <td class="text-center">{{ word.syllablesPronunciation }}</td>
          </tr>
        </tbody>
      </v-table>
      <v-pagination
        v-model="page"
        :length
        rounded="circle"
        @update:modelValue="setWords" />
    </v-card>
  </NuxtLayout>
</template>

<script setup lang="ts">
import Axios from 'axios';

const isLoading = ref(true);
const countPerPage = ref(25);
const page = ref(1);
const words = ref<Array<WordDto>>([]);
const length = ref(0);

interface WordDto {
  word: string;
  phonemes: string[];
  syllablesPronunciation: string[];
  plainTextSyllables: string[];
}

onMounted(async () => {
  await setWords();
});

async function setWords() {
  try {
    const url = `word/wordListPaginated?countPerPage=${
      countPerPage.value
    }&pageNumber=${page.value - 1}`;
    const response = await Axios.get(url);
    words.value = response.data.words;
    length.value = response.data.pages;
    isLoading.value = false;
  } catch (error) {
    console.error('Error getting word information', error);
  }
}
</script>
